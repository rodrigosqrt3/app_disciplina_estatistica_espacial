library(tidyr)
library(kableExtra)
extrair_coef <- function(model, block) {
tryCatch({
coef_table <- coef(summary(model))
ci <- confint(model)
coef_table <- coef_table[!grepl("Intercept", rownames(coef_table)), ]
ci <- ci[!grepl("Intercept", rownames(ci)), ]
data.frame(
Block = block,
Variable = rownames(coef_table),
Estimate = exp(coef_table[, "Estimate"]),
LowerCI = exp(ci[, 1]),
UpperCI = exp(ci[, 2])
)
}, error = function(e) {
warning(paste("Erro ao extrair coeficientes para o", block, ":", e$message))
return(NULL)
})
}
extrair_valores_p <- function(model, block) {
anova_result <- anova(model)
data.frame(
Block = block,
Variable = rownames(anova_result),
P_value = anova_result$`Pr(>Chi)`
)
}
# Coeficientes
resultados_bloco1 <- extrair_coef(modelo_bloco1, "Bloco 1")
resultados_bloco2 <- extrair_coef(modelo_bloco2, "Bloco 2")
resultados_bloco3 <- extrair_coef(modelo_bloco3, "Bloco 3")
# Valores-p
valores_p_bloco1 <- extrair_valores_p(modelo_bloco1, "Bloco 1")
valores_p_bloco2 <- extrair_valores_p(modelo_bloco2, "Bloco 2")
valores_p_bloco3 <- extrair_valores_p(modelo_bloco3, "Bloco 3")
# Combinando
resultados <- bind_rows(resultados_bloco1, resultados_bloco2, resultados_bloco3)
valores_p <- bind_rows(valores_p_bloco1, valores_p_bloco2, valores_p_bloco3)
resultados_completos <- left_join(resultados, valores_p, by = c("Block", "Variable"))
# Não combinou, manualmente
resultados_completos$P_value[resultados_completos$Variable %in% c("Gênero0:1", "Gênero0:2") & resultados_completos$Block == "Bloco 1"] <- valores_p_bloco1$P_value[valores_p_bloco1$Variable == "Gênero"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Cor_ref_10:1", "Cor_ref_10:2") & resultados_completos$Block == "Bloco 1"] <- valores_p_bloco1$P_value[valores_p_bloco1$Variable == "Cor_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Moradia_ref_10:1", "Moradia_ref_10:2") & resultados_completos$Block == "Bloco 1"] <- valores_p_bloco1$P_value[valores_p_bloco1$Variable == "Moradia_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Gênero0:1", "Gênero0:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "Gênero"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Cor_ref_10:1", "Cor_ref_10:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "Cor_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Moradia_ref_10:1", "Moradia_ref_10:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "Moradia_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Gênero0:1", "Gênero0:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Gênero"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Cor_ref_10:1", "Cor_ref_10:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Cor_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Moradia_ref_10:1", "Moradia_ref_10:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Moradia_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("HIV_ref_10:1", "HIV_ref_10:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "HIV_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Est_saude_inversa0:1", "Est_saude_inversa0:2", "Est_saude_inversa1:1", "Est_saude_inversa1:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "Est_saude_inversa"]
resultados_completos$P_value[resultados_completos$Variable %in% c("HIV_ref_10:1", "HIV_ref_10:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "HIV_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Est_saude_inversa0:1", "Est_saude_inversa0:2", "Est_saude_inversa1:1", "Est_saude_inversa1:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Est_saude_inversa"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Agressão_verbal_ref_10:1", "Agressão_verbal_ref_10:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Agressão_verbal_ref_1"]
print(resultados_completos)
# Ponto -> Vírgula
substituir_ponto_por_virgula <- function(x) {
sub("\\.", ",", x)
}
format_p_value <- function(p) {
ifelse(p < 0.001, "<0.001",
ifelse(p < 0.01, sprintf("%.3f", p),
sprintf("%.2f", p)))
}
resultados_formatados <- resultados_completos %>%
mutate(
Category = ifelse(grepl(":1$", Variable), "Não, mas não procurou", "Sim"),
Variable = gsub(":1$|:2$", "", Variable),
Variable = case_when(
Variable == "Gênero0" ~ "Travesti",
Variable == "Cor_ref_10" ~ "Negra",
Variable == "Moradia_ref_10" ~ "Provisória/ abrigo/ situação de rua",
Variable == "HIV_ref_10" ~ "HIV positivo",
Variable == "Est_saude_inversa0" ~ "Ruim/ Muito ruim",
Variable == "Est_saude_inversa1" ~ "Regular",
Variable == "Agressão_verbal_ref_10" ~ "Sim",
TRUE ~ Variable
),
OR_CI = substituir_ponto_por_virgula(sprintf("%.2f (%.2f - %.2f)", Estimate, LowerCI, UpperCI)),
P_value = substituir_ponto_por_virgula(format_p_value(P_value))
)
# Todas combinações
variaveis <- unique(resultados_formatados$Variable)
blocos <- c("Bloco 1", "Bloco 2", "Bloco 3")
combinacoes <- expand.grid(Variable = variaveis, Block = blocos)
resultados_completos <- combinacoes %>%
left_join(resultados_formatados, by = c("Variable", "Block")) %>%
group_by(Variable, Block) %>%
summarise(
P_value = first(P_value),
OR_CI_Nao = OR_CI[Category == "Não, mas não procurou"],
OR_CI_Sim = OR_CI[Category == "Sim"]
) %>%
ungroup() %>%
mutate(across(c(P_value, OR_CI_Nao, OR_CI_Sim), ~ifelse(is.na(.), "-", .)))
resultados_finais <- resultados_completos %>%
pivot_wider(
names_from = Block,
values_from = c(OR_CI_Nao, OR_CI_Sim, P_value),
names_glue = "{Block}_{.value}"
) %>%
select(Variable,
`Bloco 1_OR_CI_Nao`, `Bloco 1_OR_CI_Sim`, `Bloco 1_P_value`,
`Bloco 2_OR_CI_Nao`, `Bloco 2_OR_CI_Sim`, `Bloco 2_P_value`,
`Bloco 3_OR_CI_Nao`, `Bloco 3_OR_CI_Sim`, `Bloco 3_P_value`)
# Ordem correta
var_ordem <- c("Travesti", "Negra", "Provisória/ abrigo/ situação de rua", "HIV positivo",
"Ruim/ Muito ruim", "Regular", "Sim")
resultados_finais <- resultados_finais %>%
mutate(Variable = factor(Variable, levels = var_ordem)) %>%
arrange(Variable)
# Tabela
tabela_final <- resultados_finais %>%
kable(caption = "Tabela 1 - Análise multivariável dos fatores associados a ter tido problemas para acessar serviços de saúde no último ano entre mulheres transexuais. Brasil, 2021.",
col.names = c("Variáveis",
"Não, mas não procurou", "Sim", "Valor-p",
"Não, mas não procurou", "Sim", "Valor-p",
"Não, mas não procurou", "Sim", "Valor-p"),
align = c("l", rep("c", 9)),
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
add_header_above(c(" " = 1, "Bloco 1" = 3, "Bloco 2" = 3, "Bloco 3" = 3)) %>%
add_header_above(c(" " = 1, "OR (IC 95%)" = 9)) %>%
pack_rows("Gênero (ref: Mulher Trans)", 1, 1) %>%
pack_rows("Cor da pele (ref: Não negra)", 2, 2) %>%
pack_rows("Moradia (ref: Casa própria ou alugada)", 3, 3) %>%
pack_rows("HIV (ref: Negativo)", 4, 4) %>%
pack_rows("Estado de saúde (ref: Bom/ Muito bom)", 5, 6) %>%
pack_rows("Agressão verbal (ref: Não)", 7, 7) %>%
footnote(general = "OR: Razão de Odds; IC: Intervalo de Confiança")
print(tabela_final)
library(dplyr)
library(VGAM)
library(haven)
dados <- read_sav("Questoes_especificas_editado.sav")
dados <- lapply(dados, as.factor)
dados <- as.data.frame(dados)
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "0")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
dados$Idade_ref_1 <- relevel(dados$Idade_ref_1, ref = "1")
dados$Cor_ref_1 <- relevel(dados$Cor_ref_1, ref = "1")
dados$Esc_nova <- relevel(dados$Esc_nova, ref = "3")
dados$Moradia_ref_1 <- relevel(dados$Moradia_ref_1, ref = "1")
dados$Conjugal_ref_1 <- relevel(dados$Conjugal_ref_1, ref = "1")
dados$Renda_ref_1 <- relevel(dados$Renda_ref_1, ref = "1")
dados$Ocupação_cat_inversa <- relevel(dados$Ocupação_cat_inversa, ref = "3")
dados$Plano_saúde_ref_1 <- relevel(dados$Plano_saúde_ref_1, ref = "1")
dados$HIV_ref_1 <- relevel(dados$HIV_ref_1, ref = "1")
dados$Silicone_ref_1 <- relevel(dados$Silicone_ref_1, ref = "1")
dados$Est_saude_inversa <- relevel(dados$Est_saude_inversa, ref = "2")
dados$Excluída_vizinhos <- relevel(dados$Excluída_vizinhos, ref = "1")
dados$Agressão_verbal_ref_1 <- relevel(dados$Agressão_verbal_ref_1, ref = "1")
# Gênero
modelo_genero <- vglm(Prob_acesso_3_cat ~ Gênero,
family = multinomial, data = dados)
exp(coef(modelo_genero))
anova(modelo_genero)
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
anova(modelo_idade)
# Cor
modelo_cor <- vglm(Prob_acesso_3_cat ~ Cor_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_cor))
anova(modelo_cor)
# Estado Conjugal
modelo_conjug <- vglm(Prob_acesso_3_cat ~ Conjugal_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_conjug))
anova(modelo_conjug)
# Escolaridade
modelo_esc <- vglm(Prob_acesso_3_cat ~ Esc_nova,
family = multinomial, data = dados)
exp(coef(modelo_esc))
anova(modelo_esc)
# Renda
modelo_renda <- vglm(Prob_acesso_3_cat ~ Renda_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_renda))
anova(modelo_renda)
# Moradia
modelo_moradia <- vglm(Prob_acesso_3_cat ~ Moradia_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_moradia))
anova(modelo_moradia)
# Ocupação
modelo_ocup <- vglm(Prob_acesso_3_cat ~ Ocupação_cat_inversa,
family = multinomial, data = dados)
exp(coef(modelo_ocup))
anova(modelo_ocup)
# Plano de Saúde
modelo_plano <- vglm(Prob_acesso_3_cat ~ Plano_saúde_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_plano))
anova(modelo_plano)
# HIV
modelo_hiv <- vglm(Prob_acesso_3_cat ~ HIV_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_hiv))
anova(modelo_hiv)
# Exclusão
modelo_exclu <- vglm(Prob_acesso_3_cat ~ Excluída_vizinhos,
family = multinomial, data = dados)
exp(coef(modelo_exclu))
anova(modelo_exclu)
# Agressão Verbal
modelo_agressao <- vglm(Prob_acesso_3_cat ~ Agressão_verbal_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_agressao))
anova(modelo_agressao)
# Silicone
modelo_silicone <- vglm(Prob_acesso_3_cat ~ Silicone_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_silicone))
anova(modelo_silicone)
# Estado de Saúde
modelo_est <- vglm(Prob_acesso_3_cat ~ Est_saude_inversa,
family = multinomial, data = dados)
exp(coef(modelo_est))
anova(modelo_est)
modelo_bloco1 <- vglm(Prob_acesso_3_cat ~ Gênero + Idade_ref_1 + Cor_ref_1 + Esc_nova + Conjugal_ref_1 +
Renda_ref_1 + Moradia_ref_1 + Ocupação_cat_inversa,
family = multinomial, data = dados)
anova(modelo_bloco1)
modelo_bloco1 <- vglm(Prob_acesso_3_cat ~ Gênero + Idade_ref_1 + Cor_ref_1 + Esc_nova + Conjugal_ref_1 +
Moradia_ref_1 + Ocupação_cat_inversa,
family = multinomial, data = dados)
anova(modelo_bloco1)
modelo_bloco1 <- vglm(Prob_acesso_3_cat ~ Gênero + Idade_ref_1 + Cor_ref_1 + Conjugal_ref_1 +
Moradia_ref_1 + Ocupação_cat_inversa,
family = multinomial, data = dados)
anova(modelo_bloco1)
modelo_bloco1 <- vglm(Prob_acesso_3_cat ~ Gênero + Idade_ref_1 + Cor_ref_1 +
Moradia_ref_1 + Ocupação_cat_inversa,
family = multinomial, data = dados)
anova(modelo_bloco1)
modelo_bloco1 <- vglm(Prob_acesso_3_cat ~ Gênero + Cor_ref_1 +
Moradia_ref_1 + Ocupação_cat_inversa,
family = multinomial, data = dados)
anova(modelo_bloco1)
modelo_bloco1 <- vglm(Prob_acesso_3_cat ~ Gênero + Cor_ref_1 +
Moradia_ref_1,
family = multinomial, data = dados)
anova(modelo_bloco1)
modelo_bloco2 <- vglm(Prob_acesso_3_cat ~ Gênero + Cor_ref_1 +
Moradia_ref_1 + Plano_saúde_ref_1 + HIV_ref_1 +
Silicone_ref_1 + Est_saude_inversa,
family = multinomial, data = dados)
anova(modelo_bloco2)
modelo_bloco2 <- vglm(Prob_acesso_3_cat ~ Gênero + Cor_ref_1 +
Moradia_ref_1 + Plano_saúde_ref_1 + HIV_ref_1 +
Est_saude_inversa,
family = multinomial, data = dados)
anova(modelo_bloco2)
modelo_bloco2 <- vglm(Prob_acesso_3_cat ~ Gênero + Cor_ref_1 +
Moradia_ref_1 + HIV_ref_1 +
Est_saude_inversa,
family = multinomial, data = dados)
anova(modelo_bloco2)
modelo_bloco3 <- vglm(Prob_acesso_3_cat ~ Gênero + Cor_ref_1 +
Moradia_ref_1 + HIV_ref_1 +
Est_saude_inversa + Excluída_vizinhos +
Agressão_verbal_ref_1,
family = multinomial, data = dados)
anova(modelo_bloco3)
modelo_bloco3 <- vglm(Prob_acesso_3_cat ~ Gênero + Cor_ref_1 +
Moradia_ref_1 + HIV_ref_1 +
Est_saude_inversa +
Agressão_verbal_ref_1,
family = multinomial, data = dados)
anova(modelo_bloco3)
library(dplyr)
library(tidyr)
library(kableExtra)
extrair_coef <- function(model, block) {
tryCatch({
coef_table <- coef(summary(model))
ci <- confint(model)
coef_table <- coef_table[!grepl("Intercept", rownames(coef_table)), ]
ci <- ci[!grepl("Intercept", rownames(ci)), ]
data.frame(
Block = block,
Variable = rownames(coef_table),
Estimate = exp(coef_table[, "Estimate"]),
LowerCI = exp(ci[, 1]),
UpperCI = exp(ci[, 2])
)
}, error = function(e) {
warning(paste("Erro ao extrair coeficientes para o", block, ":", e$message))
return(NULL)
})
}
extrair_valores_p <- function(model, block) {
anova_result <- anova(model)
data.frame(
Block = block,
Variable = rownames(anova_result),
P_value = anova_result$`Pr(>Chi)`
)
}
# Coeficientes
resultados_bloco1 <- extrair_coef(modelo_bloco1, "Bloco 1")
resultados_bloco2 <- extrair_coef(modelo_bloco2, "Bloco 2")
resultados_bloco3 <- extrair_coef(modelo_bloco3, "Bloco 3")
# Valores-p
valores_p_bloco1 <- extrair_valores_p(modelo_bloco1, "Bloco 1")
valores_p_bloco2 <- extrair_valores_p(modelo_bloco2, "Bloco 2")
valores_p_bloco3 <- extrair_valores_p(modelo_bloco3, "Bloco 3")
# Combinando
resultados <- bind_rows(resultados_bloco1, resultados_bloco2, resultados_bloco3)
valores_p <- bind_rows(valores_p_bloco1, valores_p_bloco2, valores_p_bloco3)
resultados_completos <- left_join(resultados, valores_p, by = c("Block", "Variable"))
# Não combinou, manualmente
resultados_completos$P_value[resultados_completos$Variable %in% c("Gênero0:1", "Gênero0:2") & resultados_completos$Block == "Bloco 1"] <- valores_p_bloco1$P_value[valores_p_bloco1$Variable == "Gênero"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Cor_ref_10:1", "Cor_ref_10:2") & resultados_completos$Block == "Bloco 1"] <- valores_p_bloco1$P_value[valores_p_bloco1$Variable == "Cor_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Moradia_ref_10:1", "Moradia_ref_10:2") & resultados_completos$Block == "Bloco 1"] <- valores_p_bloco1$P_value[valores_p_bloco1$Variable == "Moradia_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Gênero0:1", "Gênero0:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "Gênero"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Cor_ref_10:1", "Cor_ref_10:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "Cor_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Moradia_ref_10:1", "Moradia_ref_10:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "Moradia_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Gênero0:1", "Gênero0:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Gênero"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Cor_ref_10:1", "Cor_ref_10:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Cor_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Moradia_ref_10:1", "Moradia_ref_10:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Moradia_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("HIV_ref_10:1", "HIV_ref_10:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "HIV_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Est_saude_inversa0:1", "Est_saude_inversa0:2", "Est_saude_inversa1:1", "Est_saude_inversa1:2") & resultados_completos$Block == "Bloco 2"] <- valores_p_bloco2$P_value[valores_p_bloco2$Variable == "Est_saude_inversa"]
resultados_completos$P_value[resultados_completos$Variable %in% c("HIV_ref_10:1", "HIV_ref_10:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "HIV_ref_1"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Est_saude_inversa0:1", "Est_saude_inversa0:2", "Est_saude_inversa1:1", "Est_saude_inversa1:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Est_saude_inversa"]
resultados_completos$P_value[resultados_completos$Variable %in% c("Agressão_verbal_ref_10:1", "Agressão_verbal_ref_10:2") & resultados_completos$Block == "Bloco 3"] <- valores_p_bloco3$P_value[valores_p_bloco3$Variable == "Agressão_verbal_ref_1"]
print(resultados_completos)
# Ponto -> Vírgula
substituir_ponto_por_virgula <- function(x) {
sub("\\.", ",", x)
}
format_p_value <- function(p) {
ifelse(p < 0.001, "<0.001",
ifelse(p < 0.01, sprintf("%.3f", p),
sprintf("%.2f", p)))
}
resultados_formatados <- resultados_completos %>%
mutate(
Category = ifelse(grepl(":1$", Variable), "Não, mas não procurou", "Sim"),
Variable = gsub(":1$|:2$", "", Variable),
Variable = case_when(
Variable == "Gênero0" ~ "Travesti",
Variable == "Cor_ref_10" ~ "Negra",
Variable == "Moradia_ref_10" ~ "Provisória/ abrigo/ situação de rua",
Variable == "HIV_ref_10" ~ "HIV positivo",
Variable == "Est_saude_inversa0" ~ "Ruim/ Muito ruim",
Variable == "Est_saude_inversa1" ~ "Regular",
Variable == "Agressão_verbal_ref_10" ~ "Sim",
TRUE ~ Variable
),
OR_CI = substituir_ponto_por_virgula(sprintf("%.2f (%.2f - %.2f)", Estimate, LowerCI, UpperCI)),
P_value = substituir_ponto_por_virgula(format_p_value(P_value))
)
# Todas combinações
variaveis <- unique(resultados_formatados$Variable)
blocos <- c("Bloco 1", "Bloco 2", "Bloco 3")
combinacoes <- expand.grid(Variable = variaveis, Block = blocos)
resultados_completos <- combinacoes %>%
left_join(resultados_formatados, by = c("Variable", "Block")) %>%
group_by(Variable, Block) %>%
summarise(
P_value = first(P_value),
OR_CI_Nao = OR_CI[Category == "Não, mas não procurou"],
OR_CI_Sim = OR_CI[Category == "Sim"]
) %>%
ungroup() %>%
mutate(across(c(P_value, OR_CI_Nao, OR_CI_Sim), ~ifelse(is.na(.), "-", .)))
resultados_finais <- resultados_completos %>%
pivot_wider(
names_from = Block,
values_from = c(OR_CI_Nao, OR_CI_Sim, P_value),
names_glue = "{Block}_{.value}"
) %>%
select(Variable,
`Bloco 1_OR_CI_Nao`, `Bloco 1_OR_CI_Sim`, `Bloco 1_P_value`,
`Bloco 2_OR_CI_Nao`, `Bloco 2_OR_CI_Sim`, `Bloco 2_P_value`,
`Bloco 3_OR_CI_Nao`, `Bloco 3_OR_CI_Sim`, `Bloco 3_P_value`)
# Ordem correta
var_ordem <- c("Travesti", "Negra", "Provisória/ abrigo/ situação de rua", "HIV positivo",
"Ruim/ Muito ruim", "Regular", "Sim")
resultados_finais <- resultados_finais %>%
mutate(Variable = factor(Variable, levels = var_ordem)) %>%
arrange(Variable)
# Tabela
tabela_final <- resultados_finais %>%
kable(caption = "Tabela 1 - Análise multivariável dos fatores associados a ter tido problemas para acessar serviços de saúde no último ano entre mulheres transexuais. Brasil, 2021.",
col.names = c("Variáveis",
"Não, mas não procurou", "Sim", "Valor-p",
"Não, mas não procurou", "Sim", "Valor-p",
"Não, mas não procurou", "Sim", "Valor-p"),
align = c("l", rep("c", 9)),
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
add_header_above(c(" " = 1, "Bloco 1" = 3, "Bloco 2" = 3, "Bloco 3" = 3)) %>%
add_header_above(c(" " = 1, "OR (IC 95%)" = 9)) %>%
pack_rows("Gênero (ref: Mulher Trans)", 1, 1) %>%
pack_rows("Cor da pele (ref: Não negra)", 2, 2) %>%
pack_rows("Moradia (ref: Casa própria ou alugada)", 3, 3) %>%
pack_rows("HIV (ref: Negativo)", 4, 4) %>%
pack_rows("Estado de saúde (ref: Bom/ Muito bom)", 5, 6) %>%
pack_rows("Agressão verbal (ref: Não)", 7, 7) %>%
footnote(general = "OR: Razão de Odds; IC: Intervalo de Confiança")
print(tabela_final)
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Gênero
modelo_genero <- vglm(Prob_acesso_3_cat ~ Gênero,
family = multinomial, data = dados)
exp(coef(modelo_genero))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "2")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Gênero
modelo_genero <- vglm(Prob_acesso_3_cat ~ Gênero,
family = multinomial, data = dados)
exp(coef(modelo_genero))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Gênero
modelo_genero <- vglm(Prob_acesso_3_cat ~ Gênero,
family = multinomial, data = dados)
exp(coef(modelo_genero))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Gênero
modelo_genero <- vglm(Prob_acesso_3_cat ~ Gênero,
family = multinomial, data = dados)
exp(coef(modelo_genero))
anova(modelo_genero)
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Gênero
modelo_genero <- vglm(Prob_acesso_3_cat ~ Gênero,
family = multinomial, data = dados)
exp(coef(modelo_genero))
dados$Idade_ref_1 <- relevel(dados$Idade_ref_1, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "0")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "0")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "2")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "0")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "2")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Gênero <- relevel(dados$Gênero, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Idade_ref_1 <- relevel(dados$Idade_ref_1, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
dados$Prob_acesso_3_cat <- relevel(dados$Prob_acesso_3_cat, ref = "1")
dados$Idade_ref_1 <- relevel(dados$Idade_ref_1, ref = "1")
# Idade
modelo_idade <- vglm(Prob_acesso_3_cat ~ Idade_ref_1,
family = multinomial, data = dados)
exp(coef(modelo_idade))
shiny::runApp('Estatística Espacial/Mapa_Especies')
runApp('Estatística Espacial/Mapa_Especies')
